Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* reverseBetween(struct ListNode* head, int left, int right) {
    
    if(!head || left == right){
        return head;
    }

    struct ListNode Dummy;
    Dummy.next = head;
    struct ListNode* prev = &Dummy;
    struct ListNode *curr = head;
    //loop till position left
    for(int i = 0; i < left - 1; i++){
        prev = prev->next;
        curr = curr->next;
    }

    struct ListNode *next;
    struct ListNode *reversePrev = NULL;
    //loop till pos right and reverse
    for(int i = 0; i < right - left + 1; i++){ //curr stops at 5
        next = curr->next;
        curr->next = reversePrev;
        reversePrev = curr;
        curr = next;
    }

    //reconnect 
    struct ListNode* tail = prev->next; //points to old start
    prev->next = reversePrev;
    tail->next = curr;

    return Dummy.next;

}
