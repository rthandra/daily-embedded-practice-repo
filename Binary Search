Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.
Example 1:

Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4
Example 2:

Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1



SOLUTION IN C:

int search(int* nums, int numsSize, int target) {
 
    int start = 0;
    int end = numsSize-1;

    while(start<=end){//looping until the median value is equal to target
        int median = (start+end)/2; 

        if(nums[median] == target){
        return median; //Found the target, return its index
        }
        else if(nums[median] < target){ //target value should be in the right half
            start = median + 1; //start will be after where the median starts
            //start will be between median and end
        }
        else if (nums[median] > target){//target value should be in the left half
            end = median - 1; //end will between start and median
        }
    }
    return -1; 
}
       
