#include "stm32f4xx.h"  // Include the necessary header file for STM32F4

// Function to transmit a single character via USART2
void putch(char data) {
    while (!(USART2->ISR & (1 << 7))); // Wait until the TX buffer is empty (TXE = 1)
    USART2->TDR = data; // Load the data into the transmit register
}

// Function to receive a single character via USART2
void getch() {
    char data;
    while (!(USART2->ISR & (1 << 5))); // Wait until RX buffer has data (RXNE = 1)
    data = USART2->RDR; // Read the received data from the receive register
    putch(data); // Echo received character back to the sender
}

// Function to send a string via USART2
void sendStr(const char* str) {
    while (*str) { // Loop until null terminator is encountered
        putch(*str++); // Send each character one by one
    }
}

// Function to initialize USART2
void USART2init() {
    // Configure PA2 (TX) and PA3 (RX) for USART2 alternate function mode
    set_GPIO_mode('A', 2, 2); // Set PA2 to alternate function mode
    GPIOA->AFR[0] |= (1 << 8); // Configure PA2 alternate function (AF7 for USART2)
    
    set_GPIO_mode('A', 3, 2); // Set PA3 to alternate function mode
    GPIOA->AFR[0] |= (1 << 12); // Configure PA3 alternate function (AF7 for USART2)

    // Enable USART2 clock
    RCC->APBENR1 |= (1 << 17); 

    // Set baud rate to 9600: BRR = (16MHz / 9600) = 1667 (0x682 in hex)
    USART2->BRR |= 0x682; 

    // Enable the receiver (RE) and transmitter (TE)
    USART2->CR1 |= (1 << 2); // Enable RX (Receiver Enable)
    USART2->CR1 |= (1 << 3); // Enable TX (Transmitter Enable)
    
    // Enable USART2
    USART2->CR1 |= (1 << 0); 

    // Send an initial character 'A' (for testing purposes)
    USART2->TDR = 'A';
}

int main(void) {
    USART2init(); // Initialize USART2
    sendStr("Hello"); // Send a test string
    getch(); // Wait for and echo a received character

    // Infinite loop to keep the program running
    for (;;) ;
}
