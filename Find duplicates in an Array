//Find duplicates in an Array
Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears at most twice, return an array of all the integers that appears twice.

You must write an algorithm that runs in O(n) time and uses only constant auxiliary space, excluding the space needed to store the output

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [2,3]
Example 2:

Input: nums = [1,1,2]
Output: [1]
Example 3:

Input: nums = [1]
Output: []

//Solution

#include <stdlib.h>

int* findDuplicates(int* nums, int numsSize, int* returnSize) {
    int *count = (int*)calloc(numsSize + 1, sizeof(int));  // count array, size n+1 to accommodate nums[i] values from 1 to n
    int *result = (int*)malloc(numsSize * sizeof(int));     // result array to store duplicates
    *returnSize = 0;  // Initialize the return size to 0
    
    // Counting the occurrences of each number in the input array
    for (int i = 0; i < numsSize; i++) {
        int index = nums[i];  // Get the value from nums[i], which will be used as the index
        count[index] = count[index] + 1;  // Increment the count at index `nums[i]`
    }

    // Checking for numbers that appear twice
    for (int i = 1; i <= numsSize; i++) {  // Loop through indices 1 to numsSize
        if (count[i] == 2) {  // If the number appeared twice, it's a duplicate
            result[*returnSize] = i;  // Store the duplicate number
            (*returnSize)++;  // Increment the returnSize
        }
    }

    free(count);  // Free the memory allocated for the count array
    return result;  // Return the result array containing duplicates
}
