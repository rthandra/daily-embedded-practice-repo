Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = "egg", t = "add"

Output: true

Explanation:

The strings s and t can be made identical by:

Mapping 'e' to 'a'.
Mapping 'g' to 'd'.
Example 2:

Input: s = "foo", t = "bar"

Output: false

Explanation:

The strings s and t can not be made identical as 'o' needs to be mapped to both 'a' and 'r'.

Example 3:

Input: s = "paper", t = "title"

Output: true


SOLUTION:
//bidirectioal-need to check both the strings are being mapped

class Solution {
public:
    bool isIsomorphic(string s, string t) {
        // Check if strings are of different lengths
        if (s.length() != t.length()) {
            return false;
        }

        unordered_map<char, char> map_s_to_t;
        unordered_map<char, char> map_t_to_s;

        for (int i = 0; i < s.length(); i++) {
            // Check if current character in s is already mapped to a character in t
            if (map_s_to_t.find(s[i]) != map_s_to_t.end()) {
                // If it is mapped, check if the mapping is consistent
                if (map_s_to_t[s[i]] != t[i]) { //checking it is mapped to something else
                    return false; // Mapping conflict
                }
            } else {
                // If it's not mapped, create a new mapping
                map_s_to_t[s[i]] = t[i]; //add new map
            }

            // Check if current character in t is already mapped to a character in s
            if (map_t_to_s.find(t[i]) != map_t_to_s.end()) {
                // If it is mapped, check if the mapping is consistent
                if (map_t_to_s[t[i]] != s[i]) {
                    return false; // Mapping conflict
                }
            } else {
                // If it's not mapped, create a new mapping
                map_t_to_s[t[i]] = s[i];
            }
        }

        // If no conflicts were found, return true
        return true;
    }
};

