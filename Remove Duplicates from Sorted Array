Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
Return k.

Example 1:

Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
Use i + 1 when comparing with the next element (common in sorting algorithms, comparing adjacent elements).
Use i - 1 when comparing with the previous element (useful for detecting changes, removing duplicates, or keeping track of a previous state).


SOLUTION:

//return arrray, removing duplicates without modifying the len
// two pointers - one traverses the array, the other one gathers unique numbers and is returned
// when there is unique number swap the value to the second pointer which is gathering the unique values
//return k, which is the count of the elements that is not empty in the array
//no extra space, inarray modification
int removeDuplicates(int* nums, int numsSize) {
    //two pointer technique
    //
    int index = 1; //helps in modifying the array, ind  = 1 because first value is always unique
    for(int i = 1; i < numsSize; i++){
        if(nums[i] != nums[i - 1]){ //out of bounds if compared with i+1
            nums[index] = nums[i]; //overrwriting the value
            index++;
        }
       
    }
    return index;
}
