/*
Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,1,2]
Output: [1,2]
Example 2:


Input: head = [1,1,2,3,3]
Output: [1,2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100

*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* deleteDuplicates(struct ListNode* head) {

    struct ListNode* curr = head;
    
    if(!head){
        return 0;
    }

    while(curr != NULL && curr->next != NULL){ //Prevents segfaults for empty list
        if(curr->val == curr->next->val){
            curr->next = curr->next->next;
        }
        else{
            curr = curr->next;
        }
    }

    return head;
    
}
