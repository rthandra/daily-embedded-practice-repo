Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.

There may be duplicates in the original array.

Note: An array A rotated by x positions results in an array B of the same length such that B[i] == A[(i+x) % A.length] for every valid index i.

Example 1:

Input: nums = [3,4,5,1,2]
Output: true
Explanation: [1,2,3,4,5] is the original sorted array.
You can rotate the array by x = 3 positions to begin on the element of value 3: [3,4,5,1,2].
Example 2:

Input: nums = [2,1,3,4]
Output: false
Explanation: There is no sorted array once rotated that can make nums.
Example 3:

Input: nums = [1,2,3]
Output: true
Explanation: [1,2,3] is the original sorted array.
You can rotate the array by x = 0 positions (i.e. no rotation) to make nums.

SOLUTION IN C++
//array needs to be non-decreasing - need to determine if the array is formed by a rotation
//EX: [3,4,5,1,2] -> [4,5,1,2,3]->[5,1,2,3,4,]->[1,2,3,4,5] = three rotations possible
//[2,1,3,4] = [1,2,3,4]->[2,3,4,1] = no rotations possible, false

//Pseudocode: 1. create a new sorted array
//2. loop and rotate the original array and check if it is equal to the sorted arr
//3. return true if it is equal to the sorted array, false otherwise
class Solution {
public:
    bool check(vector<int>& nums) {
        vector<int>sortedArr = nums; //creates a new vector and intializes it with the content of nums
        sort(sortedArr.begin(), sortedArr.end()); // sorts the array between the two iterators begin and end

        for(int i = 0; i<nums.size(); i++){
            rotate(nums.begin(), nums.begin()+1, nums.end()); //moves the first element to end, and middle to last is shifted by left
            if(nums == sortedArr){
                return true;
            }
        }
        return false;

        
    }
};
